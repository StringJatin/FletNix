{"ast":null,"code":"import _asyncToGenerator from \"/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n  let pos = 0;\n  let end;\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\nexport const readBytes = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (iterable, chunkSize, encode) {\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(iterable), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n        const chunk = _step.value;\n        {\n          yield* _asyncGeneratorDelegate(_asyncIterator(streamChunk(ArrayBuffer.isView(chunk) ? chunk : yield _awaitAsyncGenerator(encode(String(chunk))), chunkSize)), _awaitAsyncGenerator);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          yield _awaitAsyncGenerator(_iterator.return());\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  });\n  return function readBytes(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n  let bytes = 0;\n  let done;\n  let _onFinish = e => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  };\n  return new ReadableStream({\n    pull(controller) {\n      return _asyncToGenerator(function* () {\n        try {\n          const {\n            done,\n            value\n          } = yield iterator.next();\n          if (done) {\n            _onFinish();\n            controller.close();\n            return;\n          }\n          let len = value.byteLength;\n          if (onProgress) {\n            let loadedBytes = bytes += len;\n            onProgress(loadedBytes);\n          }\n          controller.enqueue(new Uint8Array(value));\n        } catch (err) {\n          _onFinish(err);\n          throw err;\n        }\n      })();\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  });\n};","map":{"version":3,"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","readBytes","iterable","encode","ArrayBuffer","isView","String","trackStream","stream","onProgress","onFinish","iterator","bytes","done","_onFinish","e","ReadableStream","pull","controller","value","next","close","loadedBytes","enqueue","Uint8Array","err","cancel","reason","return","highWaterMark"],"sources":["/Users/jatinchouhan/Desktop/All Files/MERN_Project/FletNix/client/node_modules/axios/lib/helpers/trackStream.js"],"sourcesContent":["\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"],"mappings":";;;;;AACA,OAAO,MAAMA,WAAW,GAAG,WAAWC,KAAK,EAAEC,SAAS,EAAE;EACtD,IAAIC,GAAG,GAAGF,KAAK,CAACG,UAAU;EAE1B,IAAI,CAACF,SAAS,IAAIC,GAAG,GAAGD,SAAS,EAAE;IACjC,MAAMD,KAAK;IACX;EACF;EAEA,IAAII,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG;EAEP,OAAOD,GAAG,GAAGF,GAAG,EAAE;IAChBG,GAAG,GAAGD,GAAG,GAAGH,SAAS;IACrB,MAAMD,KAAK,CAACM,KAAK,CAACF,GAAG,EAAEC,GAAG,CAAC;IAC3BD,GAAG,GAAGC,GAAG;EACX;AACF,CAAC;AAED,OAAO,MAAME,SAAS;EAAA,+BAAG,WAAiBC,QAAQ,EAAEP,SAAS,EAAEQ,MAAM,EAAE;IAAA;IAAA;IAAA;IAAA;MACrE,oCAA0BD,QAAQ,uIAAE;QAAA,MAAnBR,KAAK;QAAA;UACpB,8CAAOD,WAAW,CAACW,WAAW,CAACC,MAAM,CAACX,KAAK,CAAC,GAAGA,KAAK,8BAAUS,MAAM,CAACG,MAAM,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC;QAAC;MACnG;IAAC;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;QAAA;MAAA;QAAA;UAAA;QAAA;MAAA;IAAA;EACH,CAAC;EAAA,gBAJYM,SAAS;IAAA;EAAA;AAAA,GAIrB;AAED,OAAO,MAAMM,WAAW,GAAG,CAACC,MAAM,EAAEb,SAAS,EAAEc,UAAU,EAAEC,QAAQ,EAAEP,MAAM,KAAK;EAC9E,MAAMQ,QAAQ,GAAGV,SAAS,CAACO,MAAM,EAAEb,SAAS,EAAEQ,MAAM,CAAC;EAErD,IAAIS,KAAK,GAAG,CAAC;EACb,IAAIC,IAAI;EACR,IAAIC,SAAS,GAAIC,CAAC,IAAK;IACrB,IAAI,CAACF,IAAI,EAAE;MACTA,IAAI,GAAG,IAAI;MACXH,QAAQ,IAAIA,QAAQ,CAACK,CAAC,CAAC;IACzB;EACF,CAAC;EAED,OAAO,IAAIC,cAAc,CAAC;IAClBC,IAAI,CAACC,UAAU,EAAE;MAAA;QACrB,IAAI;UACF,MAAM;YAACL,IAAI;YAAEM;UAAK,CAAC,SAASR,QAAQ,CAACS,IAAI,EAAE;UAE3C,IAAIP,IAAI,EAAE;YACTC,SAAS,EAAE;YACVI,UAAU,CAACG,KAAK,EAAE;YAClB;UACF;UAEA,IAAIzB,GAAG,GAAGuB,KAAK,CAACtB,UAAU;UAC1B,IAAIY,UAAU,EAAE;YACd,IAAIa,WAAW,GAAGV,KAAK,IAAIhB,GAAG;YAC9Ba,UAAU,CAACa,WAAW,CAAC;UACzB;UACAJ,UAAU,CAACK,OAAO,CAAC,IAAIC,UAAU,CAACL,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,OAAOM,GAAG,EAAE;UACZX,SAAS,CAACW,GAAG,CAAC;UACd,MAAMA,GAAG;QACX;MAAC;IACH,CAAC;IACDC,MAAM,CAACC,MAAM,EAAE;MACbb,SAAS,CAACa,MAAM,CAAC;MACjB,OAAOhB,QAAQ,CAACiB,MAAM,EAAE;IAC1B;EACF,CAAC,EAAE;IACDC,aAAa,EAAE;EACjB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}